// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  Book      Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book {
  id          String       @id @default(uuid())
  name        String
  rating      Float
  price       Float
  available   Boolean
  quantity    Int
  description String
  bookPhoto   BookPhotos[]
  Author      Author       @relation(fields: [authorId], references: [id])
  authorId    String
  cartItem    CartItem[]
  OrderItem   OrderItem[]
  Category    Category?    @relation(fields: [categoryId], references: [id])
  categoryId  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model BookPhotos {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Book      Book?    @relation(fields: [bookId], references: [id])
  bookId    String?
}

model Author {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Book        Book[]
}

model Order {
  id            String         @id @default(uuid())
  invoiceNumber String         @unique
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  orderStatus   OrderStatus    @default(PENDING)
  paymentSatus  PaymentSatatus @default(PENDING)
  totalAmount   Float
  OrderItem     OrderItem[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  shipping      Shipping       @relation(fields: [shippingId], references: [id])
  shippingId    String
}

model OrderItem {
  id        String   @id @default(uuid())
  Book      Book     @relation(fields: [bookId], references: [id])
  bookId    String
  quantity  Int
  Order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orderId, bookId])
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  phone    String
  role     Role   @default(USER)
  password String

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Order     Order[]
  Cart      Cart?
  Shipping  Shipping[]
}

model Shipping {
  id         String   @id() @default(uuid())
  default    Boolean  @default(false)
  address1   String
  address2   String
  city       String
  state      String
  country    String
  postalCode String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Order      Order[]
  User       User     @relation(fields: [userId], references: [id])
  userId     String
}

model Cart {
  id        String     @id @default(uuid())
  User      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  CartItem  CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  Book      Book     @relation(fields: [bookId], references: [id])
  bookId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, bookId])
}

enum Role {
  ADMIN
  USER
  MANAGER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  REJECTED
  CANCELED
}

enum PaymentSatatus {
  PENDING
  PAID
}
